const { getBtcPrice, getCoinPrice } = require("./getPrice");
const { calculatePerformance, closeCall } = require("./function");
const { getNextSequenceNumber, Call } = require("./database");

function formatDateTime(dateTime) {
  const date = new Date(dateTime);
  const day = date.getDate();
  const month = date.getMonth() + 1; // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0 n√™n c·∫ßn c·ªông th√™m 1
  return `${day}/${month}`;
}

function startCommand(bot) {
  bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      const response = `
          Xin ch√†o! ƒê√¢y l√† h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c·ªßa bot:
          /all_ - L·∫•y t·∫•t c·∫£ c√°c l·ªánh giao d·ªãch
          /check + id - Ki·ªÉm tra hi·ªáu su·∫•t c·ªßa m·ªôt l·ªánh giao d·ªãch
          /p + coin - L·∫•y gi√° c·ªßa m·ªôt lo·∫°i coin
      `;
      bot.sendMessage(chatId, response);
  });
}

function addCallCommand(bot) {
  bot.onText(/\/add (Long|Short) (\w+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn ƒë∆∞·ª£c th√™m g·ªçi giao d·ªãch hay kh√¥ng
    if (userId != '1638898652') {
      bot.sendMessage(chatId, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.");
      return;
    }

    const tradeType = match[1];
    const coin = match[2].toUpperCase();
    const callData = match[3].split(",");

    if (callData.length === 4) {
      const entryPrice = parseFloat(callData[0].trim());
      const stopLossPrice = parseFloat(callData[1].trim());
      const takeProfitPrice = parseFloat(callData[2].trim());
      const leverage = parseInt(callData[3].trim());

      if (
        !isNaN(entryPrice) &&
        !isNaN(stopLossPrice) &&
        !isNaN(takeProfitPrice) &&
        !isNaN(leverage)
      ) {
        if (
          (tradeType === "Long" &&
            stopLossPrice < entryPrice &&
            takeProfitPrice > entryPrice) ||
          (tradeType === "Short" &&
            stopLossPrice > entryPrice &&
            takeProfitPrice < entryPrice)
        ) {
          try {
            const newCall = new Call({
              entryPrice,
              stopLossPrice,
              takeProfitPrice,
              leverage,
              tradeType,
              coin, // Th√™m lo·∫°i coin v√†o ƒë·ªëi t∆∞·ª£ng Call
              chatId,
              sequenceNumber: await getNextSequenceNumber(),
              openTime: new Date(),
            });

            await newCall.save();
            bot.sendMessage(
              chatId,
              `G·ªçi giao d·ªãch m·ªõi c√≥ s·ªë th·ª© t·ª±: ${newCall.sequenceNumber}, Lo·∫°i: ${tradeType}, Coin: ${coin}, ƒë√£ ƒë∆∞·ª£c th√™m v√†o c∆° s·ªü d·ªØ li·ªáu.`
            );
          } catch (error) {
            bot.sendMessage(
              chatId,
              "C√≥ l·ªói x·∫£y ra khi l∆∞u g·ªçi giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu."
            );
            console.error(
              "L·ªói khi l∆∞u g·ªçi giao d·ªãch v√†o c∆° s·ªü d·ªØ li·ªáu:",
              error
            );
          }
        } else {
          bot.sendMessage(
            chatId,
            `SL ho·∫∑c take profit kh√¥ng h·ª£p l·ªá cho lo·∫°i giao d·ªãch ${tradeType}.`
          );
        }
      } else {
        bot.sendMessage(
          chatId,
          "Vui l√≤ng nh·∫≠p ET, SL, TP v√† D√©p ƒë√∫ng ƒë·ªãnh d·∫°ng."
        );
      }
    } else {
      bot.sendMessage(
        chatId,
        "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin cho g·ªçi giao d·ªãch (ET, SL, TP, D√©p)."
      );
    }
  });
}

function checkPerformanceCommand(bot) {
    bot.onText(/\/check (\d+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const sequenceNumber = parseInt(match[1]);
  
      try {
        let call = await Call.findOne({ sequenceNumber });
        const coin = call.coin;
        const coinPrice = await getCoinPrice(coin)
  
        if (call) {
          const openTimeFormatted = formatDateTime(call.openTime);
          const closeTimeFormatted = call.closed ? formatDateTime(call.closeTime) : 'Ch∆∞a ƒë√≥ng';
          let callMessage = `${call.closed ? 'üî¥' : 'üü¢'}${call.coin}: ${coinPrice.toFixed(2)}$\n‚Ä¢ STT: ${call.sequenceNumber}(${openTimeFormatted}) - ${call.tradeType} - ${call.closed ? "ƒê√≥ng" : "M·ªü"}\n‚Ä¢ ET: ${call.entryPrice} - D√©p: ${call.leverage}`;
  
          if (call.closed) {
            callMessage += `\n‚Ä¢Closed Price: ${call.closePrice} (Close: ${closeTimeFormatted})\‚Ä¢nProfit: ${call.profitLoss.toFixed(2)}%`;
          } else {
            const stopLossProfit = await calculatePerformance(
              call,
              call.stopLossPrice
            );
            const currentPerformance = await calculatePerformance(
              call,
              coinPrice
            );
            callMessage += `\n‚Ä¢ Profit: ${currentPerformance.toFixed(2)}%\n‚Ä¢ TP: ${call.takeProfitPrice} - SL: ${call.stopLossPrice} - N·∫øu SL: ${stopLossProfit.toFixed(2)}%`;
          }
  
          bot.sendMessage(chatId, callMessage);
        } else {
          bot.sendMessage(
            chatId,
            `Kh√¥ng t√¨m th·∫•y g·ªçi giao d·ªãch n√†o c√≥ s·ªë th·ª© t·ª± ${sequenceNumber}.`
          );
        }
      } catch (error) {
        console.error("L·ªói khi ki·ªÉm tra Profit c·ªßa g·ªçi giao d·ªãch:", error);
        bot.sendMessage(
          chatId,
          "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra Profit c·ªßa g·ªçi giao d·ªãch."
        );
      }
    });
  }
  
  

async function allCallsCommand(bot) {
    bot.onText(/\/all/, async (msg) => {
      const chatId = msg.chat.id;
  
      try {
        const btcPrice = await getBtcPrice(); // L·∫•y gi√° Bitcoin t·ª´ m·ªôt ngu·ªìn d·ªØ li·ªáu ph√π h·ª£p
        const ethPrice = await getCoinPrice('ETH');
        const allCalls = await Call.find();
        let totalProfit = 0;
  
        if (allCalls.length > 0) {
          let message = `BTC: ${btcPrice.toFixed(2)}$ | ETH: ${ethPrice.toFixed(2)}$\n\n*Th·ªëng k√™:*\n\n`;
   
          for (const call of allCalls) {
            const coin = call.coin;
           const coinPrice = await getCoinPrice(coin)
            const openTimeFormatted = formatDateTime(call.openTime);
            const closeTimeFormatted = call.closed ? formatDateTime(call.closeTime) : 'Ch∆∞a ƒë√≥ng';
            let callMessage = `${call.closed ? 'üî¥' : 'üü¢'} *${call.coin}*\n‚Ä¢ STT: ${call.sequenceNumber}(${openTimeFormatted}) - ${call.tradeType} - ${call.closed ? "ƒê√≥ng" : "M·ªü"}\n‚Ä¢ ET: ${call.entryPrice} - D√©p: ${call.leverage}`;
  
            if (call.closed) {
              callMessage += ` - Closed Price: ${call.closePrice} (${closeTimeFormatted}) - Profit: ${call.profitLoss.toFixed(2)}%`;
              totalProfit += call.profitLoss;
            } else {
              const stopLossProfit = await calculatePerformance(
                call,
                call.stopLossPrice
              );
              const currentPerformance = await calculatePerformance(
                call,
                coinPrice
              );
              callMessage += ` - Profit: ${currentPerformance.toFixed(2)}%\n‚Ä¢ TP: ${call.takeProfitPrice} - SL: ${call.stopLossPrice}(${stopLossProfit.toFixed(2)}%)`;
              totalProfit += currentPerformance;
            }
  
            message += callMessage + "\n\n";
          }
  
          message += `*üìàT·ªïng l·ª£i nhu·∫≠n: ${totalProfit.toFixed(2)}%* \n\n L·ªánh call ƒë·∫ßy ƒë·ªß trong ‚ÄúALL IN CHANNEL‚Äù, c√°ch v√†o MI·ªÑN PH√ç nh∆∞ sau:
          \n1. ƒêƒÉng k√Ω bingx theo link sau: https://bingx.com/invite/TL07YZ\n2. KYC v√† N·∫°p 500$ v√†o t√†i kho·∫£n\n3. Li√™n h·ªá @susuu1509 ƒë·ªÉ ƒë∆∞·ª£c add v√†o nh√≥m `;
          bot.sendMessage(chatId, message, {
            parse_mode: 'markdown',
            disable_web_page_preview: true
        });
        } else {
          bot.sendMessage(
            chatId,
            "Kh√¥ng c√≥ g·ªçi giao d·ªãch n√†o trong c∆° s·ªü d·ªØ li·ªáu."
          );
        }
      } catch (error) {
        console.error("L·ªói khi truy v·∫•n g·ªçi giao d·ªãch:", error);
        bot.sendMessage(
          chatId,
          "C√≥ l·ªói x·∫£y ra khi truy v·∫•n d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu."
        );
      }
    });
  }
  

  function closeCallCommand(bot) {
    bot.onText(/\/close (\d+) (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      
      if (userId != '1638898652') {
        bot.sendMessage(chatId, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.");
        return;
      }
  
      const sequenceNumber = parseInt(match[1]);
      const closePrice = parseFloat(match[2]);
  
      try {
        let call = await Call.findOne({ sequenceNumber });
  
        if (call) {
          if (call.closed) {
            bot.sendMessage(chatId, "L·ªánh ƒë√£ ƒë√≥ng t·ª´ tr∆∞·ªõc.");
            return;
          }
            await closeCall(call, closePrice, bot, chatId);
        } else {
          bot.sendMessage(
            chatId,
            `Kh√¥ng t√¨m th·∫•y g·ªçi giao d·ªãch n√†o c√≥ s·ªë th·ª© t·ª± ${sequenceNumber}.`
          );
          console.log(`No call found for sequence number ${sequenceNumber}.`);
        }
      } catch (error) {
        console.error("L·ªói khi ƒë√≥ng g·ªçi giao d·ªãch:", error);
        bot.sendMessage(chatId, "C√≥ l·ªói x·∫£y ra khi ƒë√≥ng g·ªçi giao d·ªãch.");
      }
    });
  }
  

function checkCoinPriceCommand(bot) {
    bot.onText(/\/p (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const coin = match[1].toUpperCase(); // Chuy·ªÉn ƒë·ªïi th√†nh ch·ªØ in hoa ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng ti·ªÅn ƒë∆∞·ª£c nh·∫≠n d·∫°ng ch√≠nh x√°c
        try {
            const coinPrice = await getCoinPrice(coin);
            bot.sendMessage(chatId, `${coin}: ${coinPrice}$`);
        } catch (error) {
            console.error(`L·ªói khi ki·ªÉm tra gi√° c·ªßa ${coin}:`, error);
            bot.sendMessage(chatId, `C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra gi√° c·ªßa ${coin}.`);
        }
    });
}

function deleteCallCommand(bot) {
    bot.onText(/\/del (\d+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const userId = msg.from.id;
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn ƒë∆∞·ª£c x√≥a cu·ªôc g·ªçi hay kh√¥ng
      if (userId != '1638898652') {
        bot.sendMessage(chatId, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.");
        return;
      }
      const sequenceNumber = parseInt(match[1]);
  
      try {
        const deletedCall = await Call.findOneAndDelete({ sequenceNumber });
        if (deletedCall) {
          bot.sendMessage(chatId, `Cu·ªôc g·ªçi c√≥ ID ${sequenceNumber} ƒë√£ ƒë∆∞·ª£c x√≥a.`);
        } else {
          bot.sendMessage(chatId, `Kh√¥ng t√¨m th·∫•y cu·ªôc g·ªçi c√≥ ID ${sequenceNumber}.`);
        }
      } catch (error) {
        console.error("L·ªói khi x√≥a cu·ªôc g·ªçi:", error);
        bot.sendMessage(chatId, "C√≥ l·ªói x·∫£y ra khi x√≥a cu·ªôc g·ªçi.");
      }
    });
  }

module.exports = {
  addCallCommand,
  checkPerformanceCommand,
  allCallsCommand,
  closeCallCommand,
  checkCoinPriceCommand,
  deleteCallCommand,
  startCommand,
};
